{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","seconds","setSeconds","minutes","setMinutes","message","setMessage","useEffect","interval","setInterval","clearInterval","min","sec","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4LAkDeA,MA/Cf,WACE,MAA8BC,mBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA8BJ,oBAAS,GAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KAGGC,qBAAU,WAET,IAAIC,EAAWC,aAAY,WAIzB,GAFAC,cAAcF,GAEC,IAAZP,EACD,GAAe,IAAZE,EACCD,EAAW,IACXE,EAAWD,EAAU,OACpB,CACD,IAAKA,EAAUE,EAAU,GAAK,EAG9BH,EAFc,IAGdE,EAAWD,GACXG,GAAYD,QAGhBH,EAAWD,EAAU,KAEtB,OAGJ,CAACA,IAEJ,IAAMU,EAAMR,EAAU,GAAV,WAAmBA,GAAWA,EACpCS,EAAMX,EAAU,GAAV,WAAmBA,GAAYA,EAE3C,OACE,qBAAKY,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACGR,GAAW,qBAAKQ,UAAU,eAAf,0BACZ,sBAAKA,UAAY,QAAjB,UACGF,EADH,IACSC,WC/BFE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.67fc8591.chunk.js","sourcesContent":["import './App.css';\nimport {useState, useEffect} from 'react';\n\nfunction App() {\n  const [seconds, setSeconds] = useState(0);\n  const [minutes, setMinutes] = useState(25);\n  const [message, setMessage] = useState(false);\n\n\n     useEffect(() => {\n    \n      let interval = setInterval(() =>\n       {\n        clearInterval(interval);\n\n        if(seconds === 0){\n          if(minutes !== 0){\n              setSeconds(59);\n              setMinutes(minutes - 1);\n          }else{\n              let  minutes = message ? 24 : 4;\n              let seconds = 59;\n\n              setSeconds(seconds);\n              setMinutes(minutes);\n              setMessage(!message);\n          }\n        }else{\n          setSeconds(seconds - 1)\n        }\n      }, 1000);\n\n  \n  }, [seconds]);\n\n  const min = minutes < 10 ? `0${minutes}`: minutes;    \n  const sec = seconds < 10 ? `0${seconds}` : seconds;\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {message && <div className=\"App-meessage\">Starts in : </div>}\n        <div className = 'timer'>\n          {min}:{sec}\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}